"""create tables

Revision ID: c02de31a2c03
Revises: 4bb8f995b058
Create Date: 2025-09-10 11:32:41.945953

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c02de31a2c03"
down_revision: Union[str, None] = "4bb8f995b058"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "defis",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "defi_versions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("defi_id", sa.Integer(), nullable=False),
        sa.Column("chain_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["defi_id"], ["defis.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(
        op.f("ix_defi_versions_chain_id"), "defi_versions", ["chain_id"], unique=False
    )
    op.create_index(
        op.f("ix_defi_versions_defi_id"), "defi_versions", ["defi_id"], unique=False
    )
    op.create_table(
        "tokens",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "token_type", sa.Enum("ERC20", "NATIVE", name="tokentype"), nullable=False
        ),
        sa.Column("chain_id", sa.Integer(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("decimals", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("address"),
    )
    op.create_index(op.f("ix_tokens_chain_id"), "tokens", ["chain_id"], unique=False)
    op.create_table(
        "defi_pools",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("defi_version_id", sa.Integer(), nullable=False),
        sa.Column("chain_id", sa.Integer(), nullable=False),
        sa.Column("token0_id", sa.Integer(), nullable=False),
        sa.Column("token1_id", sa.Integer(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("swap_fee", sa.Float(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["defi_version_id"], ["defi_versions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["token0_id"], ["tokens.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["token1_id"], ["tokens.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("address"),
    )
    op.create_index(
        op.f("ix_defi_pools_chain_id"), "defi_pools", ["chain_id"], unique=False
    )
    op.create_index(
        op.f("ix_defi_pools_defi_version_id"),
        "defi_pools",
        ["defi_version_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_defi_pools_token0_id"), "defi_pools", ["token0_id"], unique=False
    )
    op.create_index(
        op.f("ix_defi_pools_token1_id"), "defi_pools", ["token1_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_defi_pools_token1_id"), table_name="defi_pools")
    op.drop_index(op.f("ix_defi_pools_token0_id"), table_name="defi_pools")
    op.drop_index(op.f("ix_defi_pools_defi_version_id"), table_name="defi_pools")
    op.drop_index(op.f("ix_defi_pools_chain_id"), table_name="defi_pools")
    op.drop_table("defi_pools")
    op.drop_index(op.f("ix_tokens_chain_id"), table_name="tokens")
    op.drop_table("tokens")
    op.drop_index(op.f("ix_defi_versions_defi_id"), table_name="defi_versions")
    op.drop_index(op.f("ix_defi_versions_chain_id"), table_name="defi_versions")
    op.drop_table("defi_versions")
    op.drop_table("defis")
    # ### end Alembic commands ###
