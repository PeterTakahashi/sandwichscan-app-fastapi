name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v5

      # Sendria を起動
      - name: Start Sendria in background
        run: |
          docker run -d \
            --name sendria \
            -p 1025:1025 \
            -p 1080:1080 \
            msztolcman/sendria:v2.2.2.0

      # Sendria のヘルスチェック (ポート応答確認)
      - name: Wait for Sendria to be ready
        run: |
          until curl -s http://localhost:1080 > /dev/null; do
            echo "Waiting for Sendria..."
            sleep 1
          done
          echo "Sendria is ready!"

      - name: Install the latest version of uv and set the python version to 3.11
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          uv python install 3.11.11
          uv venv
          uv pip install .
          uv pip install --group dev

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 1
          done

      - name: Execute init.sql
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -f ./docker/init.sql

      - name: Load .env.ci
        run: |
          cp .env.ci .env.test

      - name: Run database migrations
        run: |
          ls -la
          echo "Running migrations..."
          source .venv/bin/activate
          ENV=test alembic upgrade head

      # - name: Test with coverage
      #   run: |
      #     source .venv/bin/activate
      #     pytest --cov=app --cov-report=term-missing --cov-report=html
      #   timeout-minutes: 5

      # - name: Upload coverage report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: htmlcov/

      - name: Ruff *.py files
        run: |
          source .venv/bin/activate
          ruff check .

      - name: mypy
        continue-on-error: true
        run: |
          source .venv/bin/activate
          mypy --config-file mypy.ini .

      - name: Lint *.py files
        if: always()
        continue-on-error: true
        run: |
          source .venv/bin/activate
          pylint $(git ls-files '*.py')
